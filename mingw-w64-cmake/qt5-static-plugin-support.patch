diff -Naur cmake-3.4.1.orig/Source/cmGlobalGenerator.cxx cmake-3.4.1/Source/cmGlobalGenerator.cxx
--- cmake-3.4.1.orig/Source/cmGlobalGenerator.cxx	2015-12-02 16:43:21.000000000 +0100
+++ cmake-3.4.1/Source/cmGlobalGenerator.cxx	2015-12-07 22:43:50.804803400 +0100
@@ -1432,7 +1432,8 @@
         }
       if((!ti->second.GetPropertyAsBool("AUTOMOC")
             && !ti->second.GetPropertyAsBool("AUTOUIC")
-            && !ti->second.GetPropertyAsBool("AUTORCC"))
+            && !ti->second.GetPropertyAsBool("AUTORCC")
+            && !ti->second.GetPropertyAsBool("AUTOSTATICPLUGINS"))
           || ti->second.IsImported())
         {
         continue;
diff -Naur cmake-3.4.1.orig/Source/cmQtAutoGeneratorInitializer.cxx cmake-3.4.1/Source/cmQtAutoGeneratorInitializer.cxx
--- cmake-3.4.1.orig/Source/cmQtAutoGeneratorInitializer.cxx	2015-12-02 16:43:22.000000000 +0100
+++ cmake-3.4.1/Source/cmQtAutoGeneratorInitializer.cxx	2015-12-08 01:16:20.424623700 +0100
@@ -13,6 +13,7 @@
 
 #include "cmQtAutoGeneratorInitializer.h"
 
+#include "cmGeneratedFileStream.h"
 #include "cmLocalGenerator.h"
 #include "cmMakefile.h"
 #include "cmSourceFile.h"
@@ -255,7 +256,13 @@
     {
     toolNames.push_back("rcc");
     }
-
+  /* AUTOSTATICPLUGINS .cpp files are created at cmake execution time,
+   * and not at build time, so in that case it is possible to get here
+   * with no toolNames. */
+  if (toolNames.empty())
+    {
+    return;
+    }
   std::string tools = toolNames[0];
   toolNames.erase(toolNames.begin());
   while (toolNames.size() > 1)
@@ -477,7 +484,9 @@
 
   if (target->GetPropertyAsBool("AUTOMOC")
       || target->GetPropertyAsBool("AUTOUIC")
-      || target->GetPropertyAsBool("AUTORCC"))
+      || target->GetPropertyAsBool("AUTORCC")
+      || (    target->GetPropertyAsBool("AUTOSTATICPLUGINS")
+           && target->GetType() == cmTarget::EXECUTABLE))
     {
     cmQtAutoGeneratorInitializer::SetupSourceFiles(target, skipMoc,
                                          mocSources, mocHeaders, skipUic);
@@ -649,6 +658,56 @@
     {
     const_cast<cmTarget*>(target)->AddSource(*fileIt);
     }
+  /* in qt5-static/lib/cmake/Qt5Core/Qt5CoreConfig.cmake, macro(_populate_Core_plugin_properties ..), we'd have:
+   * set_property(TARGET PROPERTY AUTOSTATICPLUGINS True) // Not currently need as defaults to "ON"
+   * set_property(TARGET Qt5::Core APPEND PROPERTY STATIC_PLUGINS ${Plugin})
+   */
+  if (target->GetPropertyAsBool("AUTOSTATICPLUGINS"))
+    {
+    std::vector<cmTarget const*> libTargets = gtgt->GetLinkImplementationClosure("");
+    std::vector<cmTarget const*>::const_iterator li;
+    std::vector<std::string> staticPlugins;
+    for (li = libTargets.begin(); li != libTargets.end(); ++li)
+      {
+      cmTarget const* tgt = *li;
+      const char *staticPluginsProp = tgt->GetProperty("STATIC_PLUGINS");
+      if (staticPluginsProp)
+        {
+        std::vector<std::string> staticPluginsTgt = cmSystemTools::tokenize(staticPluginsProp, ";");
+        for (std::vector<std::string>::const_iterator spti = staticPluginsTgt.begin(); spti != staticPluginsTgt.end(); ++spti)
+          {
+          if (std::find(staticPlugins.begin(), staticPlugins.end(), *spti) == staticPlugins.end())
+            {
+            staticPlugins.push_back(*spti);
+            }
+          }
+        }
+      }
+
+    if (staticPlugins.size())
+      {
+      std::string static_plugins_output_dir = target->GetSupportDirectory();
+      cmSystemTools::MakeDirectory(static_plugins_output_dir.c_str());
+      std::string static_plugins_output_file = static_plugins_output_dir;
+      static_plugins_output_file += "/" + target->GetName() + "_plugin_import.cpp";
+      cmGeneratedFileStream
+        staticPluginsFileStream(static_plugins_output_file.c_str());
+      if(staticPluginsFileStream)
+        {
+        staticPluginsFileStream << "// This file is autogenerated by cmake. It imports static plugin classes for" << std::endl;
+        staticPluginsFileStream << "// static plugins specified using QTPLUGIN and QT_PLUGIN_CLASS.<plugin> variables." << std::endl;
+        staticPluginsFileStream << "#include <QtPlugin>" << std::endl;
+        for (std::vector<std::string>::const_iterator spti = staticPlugins.begin(); spti != staticPlugins.end(); ++spti)
+          {
+          staticPluginsFileStream << "Q_IMPORT_PLUGIN(" << *spti << ")" << std::endl;
+          }
+        staticPluginsFileStream.Close();
+        makefile->AppendProperty("ADDITIONAL_MAKE_CLEAN_FILES",
+                                static_plugins_output_file.c_str(), false);
+        const_cast<cmTarget*>(target)->AddSource(static_plugins_output_file);
+        }
+      }
+    }
 }
 
 void cmQtAutoGeneratorInitializer::SetupAutoMocTarget(cmTarget const* target,
diff -Naur cmake-3.4.1.orig/Source/cmTarget.cxx cmake-3.4.1/Source/cmTarget.cxx
--- cmake-3.4.1.orig/Source/cmTarget.cxx	2015-12-02 16:43:22.000000000 +0100
+++ cmake-3.4.1/Source/cmTarget.cxx	2015-12-07 22:38:57.046997600 +0100
@@ -229,6 +229,7 @@
     this->SetPropertyDefault("AUTOMOC", 0);
     this->SetPropertyDefault("AUTOUIC", 0);
     this->SetPropertyDefault("AUTORCC", 0);
+    this->SetPropertyDefault("AUTOSTATICPLUGINS", 0);
     this->SetPropertyDefault("AUTOMOC_MOC_OPTIONS", 0);
     this->SetPropertyDefault("AUTOUIC_OPTIONS", 0);
     this->SetPropertyDefault("AUTORCC_OPTIONS", 0);
@@ -1564,6 +1565,7 @@
     builtIns.insert("IMPORTED");
     builtIns.insert("NAME");
     builtIns.insert("TYPE");
+    builtIns.insert("STATIC_PLUGINS");
     }
 
   if (builtIns.count(prop))
