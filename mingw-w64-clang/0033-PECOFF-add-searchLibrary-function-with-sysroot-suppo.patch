From ef70aa910f276615977c7b3e61f5c61418208960 Mon Sep 17 00:00:00 2001
From: Martell Malone <martellmalone@gmail.com>
Date: Mon, 8 Jun 2015 02:21:51 +0100
Subject: [PATCH 3/4] PECOFF: add searchLibrary function with sysroot support

---
 include/lld/ReaderWriter/PECOFFLinkingContext.h  |  5 ++++
 lib/ReaderWriter/PECOFF/PECOFFLinkingContext.cpp | 36 ++++++++++++++++++++++++
 2 files changed, 41 insertions(+)

diff --git a/include/lld/ReaderWriter/PECOFFLinkingContext.h b/include/lld/ReaderWriter/PECOFFLinkingContext.h
index 2e19dd8..4f48882 100644
--- a/include/lld/ReaderWriter/PECOFFLinkingContext.h
+++ b/include/lld/ReaderWriter/PECOFFLinkingContext.h
@@ -105,6 +105,7 @@ public:
     _tempFiles.push_back(std::move(fileRemover));
   }
 
+  ErrorOr<StringRef> searchLibrary(StringRef libName) const;
   StringRef searchLibraryFile(StringRef path) const;
 
   StringRef decorateSymbol(StringRef name) const;
@@ -321,6 +322,9 @@ public:
     return _parseDirectives;
   }
 
+  StringRef getSysroot() const { return _sysrootPath; }
+  void setSysroot(StringRef path) { _sysrootPath = path; }
+
 protected:
   /// Method to create a internal file for the entry symbol
   std::unique_ptr<File> createEntrySymbolFile() const override;
@@ -402,6 +406,7 @@ private:
   std::set<std::string> _noDefaultLibs;
 
   std::vector<StringRef> _inputSearchPaths;
+  StringRef _sysrootPath = "";
   std::unique_ptr<Writer> _writer;
 
   // A map for weak aliases.
diff --git a/lib/ReaderWriter/PECOFF/PECOFFLinkingContext.cpp b/lib/ReaderWriter/PECOFF/PECOFFLinkingContext.cpp
index 2bd0e9c..043fe6f 100644
--- a/lib/ReaderWriter/PECOFF/PECOFFLinkingContext.cpp
+++ b/lib/ReaderWriter/PECOFF/PECOFFLinkingContext.cpp
@@ -23,11 +23,16 @@
 #include "llvm/ADT/STLExtras.h"
 #include "llvm/ADT/SmallString.h"
 #include "llvm/Support/Allocator.h"
+#include "llvm/Support/Errc.h"
+#include "llvm/Support/FileSystem.h"
 #include "llvm/Support/Path.h"
 #include <bitset>
 #include <climits>
 #include <set>
 
+using llvm::sys::fs::exists;
+using llvm::sys::path::is_absolute;
+
 namespace lld {
 
 bool PECOFFLinkingContext::validateImpl(raw_ostream &diagnostics) {
@@ -214,6 +219,37 @@ bool PECOFFLinkingContext::addSectionRenaming(raw_ostream &diagnostics,
   return true;
 }
 
+static void buildSearchPath(SmallString<128> &path, StringRef dir,
+                            StringRef sysRoot) {
+  if (dir.startswith("=/")) {
+    // If a search directory begins with "=", "=" is replaced
+    // with the sysroot path.
+    path.assign(sysRoot);
+    path.append(dir.substr(1));
+  } else {
+    path.assign(dir);
+  }
+}
+
+ErrorOr<StringRef> PECOFFLinkingContext::searchLibrary(StringRef libName) const {
+  bool hasColonPrefix = libName[0] == ':';
+  SmallString<128> path;
+  for (StringRef dir : _inputSearchPaths) {
+    // Search for static libraries too
+    buildSearchPath(path, dir, _sysrootPath);
+    llvm::sys::path::append(path, hasColonPrefix
+                                      ? libName.drop_front()
+                                      : Twine("lib", libName) + ".a");
+
+    if (exists(path.str()))
+      return path.str().copy(_allocator);
+  }
+  if (hasColonPrefix && exists(libName.drop_front()))
+      return libName.drop_front();
+
+  return make_error_code(llvm::errc::no_such_file_or_directory);
+}
+
 /// Try to find the input library file from the search paths and append it to
 /// the input file list. Returns true if the library file is found.
 StringRef PECOFFLinkingContext::searchLibraryFile(StringRef filename) const {
-- 
2.3.3

