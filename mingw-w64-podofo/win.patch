--- podofo-0.9.3/src/CMakeLists.txt.orig	2014-06-15 13:27:21.000000000 +0200
+++ podofo-0.9.3/src/CMakeLists.txt	2015-10-10 19:24:45.115148986 +0200
@@ -107,11 +107,6 @@
   doc/PdfXObject.cpp
   )
 
-IF(WIN32)
-    # If we build for windows systems, we also include the resource file
-    SET(PODOFO_DOC_SOURCES ${PODOFO_DOC_SOURCES} doc/podofo-doc.rc)
-ENDIF(WIN32)
-
 SET(PODOFO_HEADERS
   podofo-base.h
   podofo.h)
--- podofo-0.9.3/cmake/modules/FindCppUnit.cmake.orig	2014-06-15 13:27:21.000000000 +0200
+++ podofo-0.9.3/cmake/modules/FindCppUnit.cmake	2015-10-10 19:24:45.115148986 +0200
@@ -24,9 +24,9 @@
     SET(CPPUNIT_LIBRARIES)
 
     IF(CPPUNIT_CONFIG_EXECUTABLE)
-        EXEC_PROGRAM(${CPPUNIT_CONFIG_EXECUTABLE} ARGS --cflags RETURN_VALUE _return_VALUE OUTPUT_VARIABLE CPPUNIT_CFLAGS)
-        EXEC_PROGRAM(${CPPUNIT_CONFIG_EXECUTABLE} ARGS --libs RETURN_VALUE _return_VALUE OUTPUT_VARIABLE CPPUNIT_LIBRARIES)
-        EXEC_PROGRAM(${CPPUNIT_CONFIG_EXECUTABLE} ARGS --version RETURN_VALUE _return_VALUE OUTPUT_VARIABLE CPPUNIT_INSTALLED_VERSION)
+        EXECUTE_PROCESS(COMMAND sh ${CPPUNIT_CONFIG_EXECUTABLE} --cflags OUTPUT_VARIABLE CPPUNIT_CFLAGS OUTPUT_STRIP_TRAILING_WHITESPACE)
+        EXECUTE_PROCESS(COMMAND sh ${CPPUNIT_CONFIG_EXECUTABLE} --libs OUTPUT_VARIABLE CPPUNIT_LIBRARIES OUTPUT_STRIP_TRAILING_WHITESPACE)
+        EXECUTE_PROCESS(COMMAND sh ${CPPUNIT_CONFIG_EXECUTABLE} --version OUTPUT_VARIABLE CPPUNIT_INSTALLED_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)
         STRING(REGEX REPLACE "-I(.+)" "\\1" CPPUNIT_CFLAGS "${CPPUNIT_CFLAGS}")
     ELSE(CPPUNIT_CONFIG_EXECUTABLE)
         # in case win32 needs to find it the old way?
@@ -50,7 +50,7 @@
   endif(NOT CppUnit_FIND_QUIETLY)
 
   IF(CPPUNIT_CONFIG_EXECUTABLE)
-    EXEC_PROGRAM(${CPPUNIT_CONFIG_EXECUTABLE} ARGS --version RETURN_VALUE _return_VALUE OUTPUT_VARIABLE CPPUNIT_INSTALLED_VERSION)
+    EXECUTE_PROCESS(COMMAND sh ${CPPUNIT_CONFIG_EXECUTABLE} --version OUTPUT_VARIABLE CPPUNIT_INSTALLED_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)
   ENDIF(CPPUNIT_CONFIG_EXECUTABLE)
 
   macro_ensure_version( ${CPPUNIT_MIN_VERSION} ${CPPUNIT_INSTALLED_VERSION} CPPUNIT_INSTALLED_VERSION_OK )
--- podofo-0.9.3/cmake/modules/FindLUA.cmake.orig	2015-10-29 09:07:29.384623400 +0300
+++ podofo-0.9.3/cmake/modules/FindLUA.cmake	2015-10-29 09:08:37.431623400 +0300
@@ -1,26 +1,73 @@
-# LUA_FOUND - system has Fontconfig
-# LUA_LIBRARIES - Link these to use LUA
-# LUA_DEFINITIONS - Compiler switches required for using LUA
+# Locate Lua library
+# This module defines
+#  LUA_LIBRARIES
+#  LUA_FOUND, if false, do not try to link to Lua 
+#  LUA_INCLUDE_DIR, where to find lua.h 
 #
-# Based on FindFONTCONFIG.cmake Copyright (c) 2006,2007 Laurent Montel, <montel@kde.org>
-#
-# Redistribution and use is allowed according to the terms of the BSD license.
-# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
-#
-# TODO: Update this code to handle debug/release builds on win32.
-
-if (LUA_LIBRARIES AND LUA_INCLUDE_DIR)
-
-  # in cache already
-  set(LUA_FOUND TRUE)
-
-else (LUA_LIBRARIES AND LUA_INCLUDE_DIR)
-
-  FIND_PACKAGE(Lua51)
-
-  include(PoDoFoFindPackageHandleStandardArgs)
-  FIND_PACKAGE_HANDLE_STANDARD_ARGS(Lua DEFAULT_MSG LUA_LIBRARIES LUA_INCLUDE_DIR )
-  
-  mark_as_advanced(LUA_LIBRARIES LUA_INCLUDE_DIR)
+# Note that the expected include convention is
+#  #include "lua.h"
+# and not
+#  #include <lua/lua.h>
+# This is because, the lua location is not standardized and may exist
+# in locations other than lua/
+
+
+FIND_PATH(LUA_INCLUDE_DIR lua.h
+  PATHS
+  $ENV{LUA_DIR}
+  NO_DEFAULT_PATH
+  PATH_SUFFIXES include/lua include
+)
+
+FIND_PATH(LUA_INCLUDE_DIR lua.h
+  PATHS
+  ~/Library/Frameworks
+  /Library/Frameworks
+  /usr/local
+  /usr
+  /sw # Fink
+  /opt/local # DarwinPorts
+  /opt/csw # Blastwave
+  /opt
+  PATH_SUFFIXES include/lua include
+)
+
+FIND_LIBRARY(LUA_LIBRARY 
+  NAMES lua
+  PATHS
+  $ENV{LUA_DIR}
+  NO_DEFAULT_PATH
+    PATH_SUFFIXES lib64 lib
+)
+
+FIND_LIBRARY(LUA_LIBRARY
+  NAMES lua
+  PATHS
+  ~/Library/Frameworks
+  /Library/Frameworks
+  /usr/local
+  /usr
+  /sw
+  /opt/local
+  /opt/csw
+  /opt
+    PATH_SUFFIXES lib64 lib
+)
+
+IF(LUA_LIBRARY)
+  # include the math library for Unix
+  IF(UNIX AND NOT APPLE)
+    FIND_LIBRARY(LUA_MATH_LIBRARY m)
+    SET( LUA_LIBRARIES "${LUA_LIBRARY};${LUA_MATH_LIBRARY}" CACHE STRING "Lua Libraries")
+  # For Windows and Mac, don't need to explicitly include the math library
+  ELSE(UNIX AND NOT APPLE)
+    SET( LUA_LIBRARIES "${LUA_LIBRARY}" CACHE STRING "Lua Libraries")
+  ENDIF(UNIX AND NOT APPLE)
+ENDIF(LUA_LIBRARY)
+
+INCLUDE(PoDoFoFindPackageHandleStandardArgs)
+# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if 
+# all listed variables are TRUE
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(Lua DEFAULT_MSG  LUA_LIBRARIES LUA_INCLUDE_DIR)
 
-endif (LUA_LIBRARIES AND LUA_INCLUDE_DIR)
+MARK_AS_ADVANCED(LUA_INCLUDE_DIR LUA_LIBRARIES LUA_LIBRARY LUA_MATH_LIBRARY)
